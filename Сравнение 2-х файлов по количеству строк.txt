.model small 
.stack 
.data                  

file_1     db 'file1.txt',0    		; 1-ый исходный файл для сравнения

file_2     db 'file2.txt',0    		; 2-ый исходный файл для сравнения

file_result      db 'result.txt',0  ; Файл вывода р-тата  сравнения             

error      db 'Error!',13,10,'$'  	; Сообщение об ошибке при работе с файлами      

buffer_1     db 512 dup(0)     

buffer_2     db 512 dup(0)   		; Память под 2 буфера
        
handle     dw 0   					; Дискриптор файла

str2        db 100 dup(?), '$'
str1        db 100 dup(?), '$'
len         dw 100 
countEntersFile1        db 1 dup(?)
countEntersFile2        db 1 dup(?)
countEntersFile3        db 1 dup(?)
maxCountEnters      db 9 dup(?), '$'  
tempCountEnters     db 9 dup(?), '$'
.code          
     jmp begin 

begin:
    mov ax, @data				
    mov ds, ax
    mov es, ax				 ; ds и es установили на текущий сегмент данных
    call initFile1		 	 ; вызываем ф-цию обработки 1ого файла
    call initFile2		 	 ; вызываем ф-цию обработки 2ого файла           
    call compareEntersFiles  ; вызываем ф-цию для сравнения кол-ва строк 2х файллов
    call openFileResult		 ; вызываем ф-цию открытия файла результатов
    jmp exit				 ; выход из программы

;---------------------------------	
; Обработка 1 файла
; Вход  DX - адрес файла Al = 0 (0- чтение, 1- запись, 2-чтение и запись)	
;---------------------------------	
	
initFile1:
    lea dx, file_1		; ф-ция 3Dh открывает файл
    call openFile 		; вызывает ф-цию открытия
    lea dx,buffer_1		; в dx адрес 1ого буфера
    call readFile		; вызываем ф-цию чтения
    lea di,buffer_1		; в dx адрес 1ого буфера
    call countEnters	; вызов ф-ции подсчета строк
    lea di,countEntersFile1 
    stosw 				; сохраняем р-тат подсчета в countEntersFile1
    call closeFile		; вызов ф-ции закрытия файла
    ret					; возврат в call

	
;---------------------------------	
; Обработка 2 файла
; Вход  DX - адрес файла Al = 0 (0 - чтение, 1 - запись, 2 - чтение и запись)	
;---------------------------------		
	
initFile2:						; аналогично как и 1ый файл
    lea dx, file_2
    call openFile  
    lea dx,buffer_2
    call readFile 
    lea di,buffer_2
    call countEnters
    lea di,countEntersFile2		; сохраняем р-тат подсчета в countEntersFile2
    stosw
    call closeFile
    ret 
    
;---------------------------------	
; Открытие файла
; Вход: BX - адрес файла
; Выход: AX - дескриптор файла
;---------------------------------		
openFile: 			
    mov ah,3Dh 		; функция открытия файла            
    xor al,al		; обнулили Al (открытие файла для чтения)
    int 21h 	
    ret 			; возврат к последнему call
    
;---------------------------------	
; Чтение файла
; Вход:  bx - дескриптор файла
;		 ah - 3Fh,
; 		 cx - кол-во считываемых байт
;		 dx - адрес куда поместить то, что прочитали
; Выход: Ax - кол-во действительно прочитанных байт
;---------------------------------	    
readFile: 		
    mov [handle],ax ; сохранили дескриптор в handle        
    mov bx,ax   	; дескриптор в bx            
    mov ah,3Fh                        
    mov cx,80  		; в cx кол-во байт, сколько нужно считать из файла           
    int 21h
     
    ret    			; возврат в call               
	
;------------------------------------------------
; ф-ция подсчета кол-ва строк	
; Вход:  di - адресс буфера n-ого файла
; Выход: Ax - кол-во строк
;------------------------------------------------	
countEnters:		
    push ds
    pop es			; ds и es установили на текущий сегмент данных
    cld				; обрабоботка буфера с начальной позиции
    mov al, 13		; в al указываем что ищем "enter"
    mov dx, 0		; dx - счеткик кол-ва строк
    
    mov     cx,100	; в cx кол-во итераций проверок
poisk:    repne scasb 	;команда asm поиска указанного символа 
    je     found	; переход в found если есть совпадение
    jmp end       	; переход в end после цикла проверки
found:    
    inc dx  		; инкрементим счетчик
    jmp    poisk  	; возвращаемся к поиску
    
end: 
    inc dx			; инкрементим счетчик
    mov ax,dx 		; значение счетчика из dx в ax
    ret

;------------------------------------------------
; ф-ция поска файла с max кол-вом строк	

; Выход: maxCountEnters - имя файла с max кол-вом строк
;------------------------------------------------		
compareEntersFiles: 
; считаем что 1-ый файл содержит наибольшее кол-во строк
    lea si, file_1 				
    lea di, maxCountEnters  	
    call copyStr				; вызываем ф-цию копирования строки в строку
    lea si, file_2 
    lea di, tempCountEnters
    call copyStr  				; вызываем ф-цию копирования строки в строку
    mov al,countEntersFile1     
    mov bl,countEntersFile2   
    call compareValue           ; вызываем ф-цию сравнения
    lea si, maxCountEnters 
    lea di, str2	
    call copyStr				; в str2 имя файла с большим кол-вом строк
    ret 

;------------------------------------------------------
; ф-ция сравнения 2-ух чисел
; Вход:
; al - 1ое число
; bl - 2ое число
; Выход:
; maxCountEnters - имя большего файла
; al - большее число
;------------------------------------------------------
compareValue:
    cmp al,bl  ; сравнить 2 числа
    jg  ifMore ; переход если первое значение больше второго
	; иначе
    mov al,bl 	; в al заносим bl
    lea si, tempCountEnters 
    lea di, maxCountEnters
    call copyStr ; вызов ф-ции копирования
    ret
ifMore:
    ret

;--------------------------------------
;ф-ция копирования строки в строку
;Вход:
; в si имя строки, которую копируем	
; в di имя строки, куда копируем
;--------------------------------------    
copyStr:
    cld			; обработка начнется с начальной позиции
    mov cx, 9   ; в cx кол-во итерации копирования
    rep movsb 	; команда asm для копирования символов
    ret

;---------------------------------	
; Отрыть файл для записи результата сравнения
;---------------------------------	     
openFileResult: 		
    mov ah,3Dh              
    mov al,1  			; al=1 режим для записи             
    lea dx, file_result
    int 21h     
    jnc printFileResult вызываем ф-цию записи в файл                  
    call error_msg 
	
;---------------------------------	
; Запись результата сравнения в файл
; Вход: bx - дескриптор файла в который будем записывать
;		dx - адрес буфера, содержащего записываемые данные
;		cx - число записываемых байт
;---------------------------------	    
printFileResult: 		  
    mov [handle],ax         
    mov bx,ax  
    mov ah, 40h  		; записываем в файл ф-цией 40h() 
    lea dx,str2 
    mov cx,9
    int 21h           
    jmp closeFile 		; вызывает ф-цию закрытия файла 
	
;---------------------------------	
; Закрытие файла
; Вход bx-дескриптор файла
;---------------------------------	 
closeFile: 				
    mov ah,3Eh              
    mov bx,[handle] 	; помещаем дескриптор в bx         
    int 21h
    xor dx,dx 			; "обнуляем" dx
    xor bx,bx 			; "обнуляем" bx
    ret 
	
;---------------------------------	
; Завершение программы  
;---------------------------------	 	
exit:  					  
    mov ah,8                
    int 21h                 
    mov ax,4C00h            
    int 21h    
	
;---------------------------------	
; Вывод сообщения об ошибке
;---------------------------------	  
error_msg:
    mov ah,9
    lea dx,error
    int 21h                 
    ret
