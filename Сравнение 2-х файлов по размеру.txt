.model small 
.stack 
.data                  

file_1     db 'file1.txt',0    		; 1-ый исходный файл для сравнения

file_2     db 'file2.txt',0    		; 2-ый исходный файл для сравнения

file_result      db 'result.txt',0  ; Файл вывода р-тата  сравнения             

error      db 'Error!',13,10,'$'  	; Сообщение об ошибке при работе с файлами      

buffer_1     db 512 dup(0)     

buffer_2     db 512 dup(0)   		; Память под 3 буфера  
        
handle     dw 0   					; Дискриптор файла

str2        db 100 dup(?), '$'
str1        db 100 dup(?), '$'
len         dw 100 
sizeFile1        db 1 dup(?)
sizeFile2        db 1 dup(?)
sizeFile3        db 1 dup(?)
maxFileName      db 9 dup(?), '$'  
tempFileName     db 9 dup(?), '$'
.code          
     jmp begin 

begin:
    mov ax, @data				
    mov ds, ax
    mov es, ax				 ; ds и es установили на текущий сегмент данных
    call initFile1		 	 ; вызываем ф-цию обработки 1ого файла
    call initFile2		 	 ; вызываем ф-цию обработки 2ого файла        
    call compareSizeFiles	 ; вызываем ф-цию для сравнения размера 2х файлов
    call openFileResult		 ; вызываем ф-цию открытия файла результатов
    jmp exit				 ; выход из программы

;---------------------------------	
; Обработка 2 файла
; Вход  DX - адрес файла Al = 0 (0- чтение, 1- запись, 2-чтение и запись)	
;---------------------------------	
initFile1:
    lea dx, file_1			; ф-ция 3Dh открывает файл
    call openFile 			; вызывает ф-цию открытия
    lea dx,buffer_1			; в dx адрес 1ого буфера
    call readFile 			; вызываем ф-цию чтения
    lea di,sizeFile1		; в dx адрес 1ого буфера
    stosw					; сохраняем р-тат подсчета в sizeFile1
    lea bx,buffer_1 		; в bx адрес 1ого буфера
    call buffToStr 			; вызов buffToStr
    call closeFile			; вызов ф-ции закрытия файла
    ret
	
;---------------------------------	
; Обработка 2 файла
; Вход  DX - адрес файла Al = 0 (0 - чтение, 1 - запись, 2 - чтение и запись)	
;---------------------------------	
initFile2:
    lea dx, file_2
    call openFile  
    lea dx,buffer_2
    call readFile
    lea di,sizeFile2
    stosw 
    lea bx,buffer_2 
    call buffToStr
    call closeFile
    ret 
    
;---------------------------------	
; Открытие файла
; Вход: BX - адрес файла
; Выход: AX - дескриптор файла
;---------------------------------		
openFile: 			
    mov ah,3Dh 		; функция открытия файла            
    xor al,al		; обнулили Al (открытие файла для чтения)
    int 21h 	
    ret 			; возврат к последнему call
    
;---------------------------------	
; Чтение файла
; Вход:  bx - дескриптор файла
;		 ah - 3Fh,
; 		 cx - кол-во считываемых байт
;		 dx - адрес куда поместить то, что прочитали
; Выход: Ax - кол-во действительно прочитанных байт
;---------------------------------	    
readFile: 		
    mov [handle],ax ; сохранили дескриптор в handle        
    mov bx,ax   	; дескриптор в bx            
    mov ah,3Fh                        
    mov cx,80  		; в cx кол-во байт, сколько нужно считать из файла           
    int 21h
     
    ret    			; возврат в call               
	
	
;---------------------------------	
; Добавление символа $ в конец строки
;---------------------------------	 	
buffToStr: 		
    add bx,ax 		 ; В AX количество прочитанных байтов              
    mov byte[bx],'$' ; Добавление символа '$'
    ret ; возврат

	
;------------------------------------------------
; ф-ция поска файла с max размером

; Выход: maxFileName - имя файла с max размером
;------------------------------------------------	
compareSizeFiles: 
    lea si, file_1 
    lea di, maxFileName		
    call copyStr				; вызываем ф-цию копирования строки в строку
    lea si, file_2 
    lea di, tempFileName
    call copyStr  				; вызываем ф-цию копирования строки в строку
    mov al,sizeFile1     
    mov bl,sizeFile2   
    call compareValue			; вызываем ф-цию сравнения
    lea si, maxFileName 
    lea di, str2
    call copyStr				; в str2 имя файла с большим размером
    ret 

	
;------------------------------------------------------
; ф-ция сравнения 2-ух чисел
; Вход:
; al - 1ое число
; bl - 2ое число
; Выход:
; maxFileName - имя большего файла
; al - большее число
;------------------------------------------------------
compareValue:
     cmp al,bl				; сравнить 2 числа
     jg  ifMore				; переход если первое значение больше второго
	 ; иначе
     mov al,bl				; в al заносим bl
     lea si, tempFileName 
     lea di, maxFileName
     call copyStr 			; вызов ф-ции копирования
     ret
ifMore:
     ret
     
;--------------------------------------
;ф-ция копирования строки в строку
;Вход:
; в si имя строки, которую копируем	
; в di имя строки, куда копируем
;--------------------------------------    
copyStr:
    cld			; обработка начнется с начальной позиции
    mov cx, 9   ; в cx кол-во итерации копирования
    rep movsb 	; команда asm для копирования символов
    ret
         
;---------------------------------	
; Отрыть файл для записи результата сравнения
;---------------------------------	     
openFileResult: 		
    mov ah,3Dh              
    mov al,1  			; al=1 режим для записи             
    lea dx, file_result
    int 21h     
    jnc printFileResult вызываем ф-цию записи в файл                  
    call error_msg 
	
;---------------------------------	
; Запись результата сравнения в файл
; Вход: bx - дескриптор файла в который будем записывать
;		dx - адрес буфера, содержащего записываемые данные
;		cx - число записываемых байт
;---------------------------------	    
printFileResult: 		  
    mov [handle],ax         
    mov bx,ax  
    mov ah, 40h  		; записываем в файл ф-цией 40h() 
    lea dx,str2 
    mov cx,9
    int 21h           
    jmp closeFile 		; вызывает ф-цию закрытия файла 
	
;---------------------------------	
; Закрытие файла
; Вход bx-дескриптор файла
;---------------------------------	 
closeFile: 				
    mov ah,3Eh              
    mov bx,[handle] 	; помещаем дескриптор в bx         
    int 21h
    xor dx,dx 			; "обнуляем" dx
    xor bx,bx 			; "обнуляем" bx
    ret 
	
;---------------------------------	
; Завершение программы  
;---------------------------------	 	
exit:  					  
    mov ah,8                
    int 21h                 
    mov ax,4C00h            
    int 21h    
	
;---------------------------------	
; Вывод сообщения об ошибке
;---------------------------------	  
error_msg:
    mov ah,9
    lea dx,error
    int 21h                 
    ret


